<<main.cpp 파일>>

int main()
{
    initscr();
    resize_term(40, 100);
    keypad(stdscr, TRUE);
    curs_set(0);
    noecho();
    start_color();
    init_pair(1, COLOR_YELLOW, COLOR_BLACK);
    bkgd(COLOR_PAIR(1));
    attron(COLOR_PAIR(1));

    Game game;
    game.gameStart();

    border('*', '*', '*', '*', '*', '*', '*', '*');

    //맵 그리기
    for (int j = 0; j < game.getMaps()[game.getCurrentStage()].size(); j++)
    {
        for (int k = 0; k < game.getMaps()[game.getCurrentStage()][j].size(); k++)
        {
            if (game.getMaps()[game.getCurrentStage()][j][k] == 5)
                mvprintw(20 + j, 20 + k, "#");
            else if (game.getMaps()[game.getCurrentStage()][j][k] == 4)
                mvprintw(20 + j, 20 + k, " ");
            else
                mvprintw(20 + j, 20 + k, "%d", game.getMaps()[game.getCurrentStage()][j][k]);
        }
    }

    refresh();    
    attroff(COLOR_PAIR(1));
    endwin();
}

<<Game.h 파일>>

class Game
{
private:
    int currentStage;
    vector<vector<vector<int>>> maps;
    vector<vector<pair<int, int>>> goalPositions;
    
public:
    int getCurrentStage() { return currentStage; }
    vector<vector<vector<int>>> getMaps() { return maps; }

    void gameStart();
    void setMaps();
};

<<Game.cpp 파일>>

void Game::gameStart()
{
    setMaps();
}

//3차원 벡터에 maps.txt를 가져와 데이터를 저장하는 함수
void Game::setMaps()
{
    int numOfRows, numOfCols;
    ifstream is("maps.txt");
    is >> numOfStages;
    this->maps.assign(numOfStages, vector<vector<int>>());
    for (int i = 0; i < numOfStages; i++)
    {
        is >> numOfRows >> numOfCols;
        this->maps[i].assign(numOfRows, vector<int>(numOfCols, -1));
        for (int j = 0; j < numOfRows; j++)
            for (int k = 0; k < numOfCols; k++)
                is >> this->maps[i][j][k];
    }
}